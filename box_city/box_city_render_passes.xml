<Root>
<Global>
  <Resource type="RootSignature" name="BoxRootSignature">
    <RootParam index="0" type="Constants" num_constants="1" shader_register="0" visibility="All"/>
    <RootParam index="1" type="DescriptorTable">
      <Range base_shader_register="1" size="1" type="ConstantBuffer" visibility="All"/>
      <Range base_shader_register="0" size="1" type="ShaderResource" visibility="All"/>
      <Range base_shader_register="1" size="1" type="ShaderResource" visibility="All"/>
    </RootParam>
    <StaticSample shader_register="0" visibility="Pixel"/>
    <StaticSample shader_register="1" visibility="Pixel" filter="Linear"/>
  </Resource>
  <Resource type="GraphicsPipelineState" name="BoxPipelineState">
    <RootSignature>BoxRootSignature</RootSignature>
    <InputLayouts>
      <Input semantic_name="POSITION" semantic_index="0" format="R32G32B32A32_FLOAT" input_slot="0"/>
    </InputLayouts>
    <Shader pixelshader_entry="ps_box_main" vertexshader_entry="vs_box_main" target="5_0">
      cbuffer ViewData : b1
      {
        float4x4 view_projection_matrix;
      };
      
      struct BoxInstance
      {
        float4 bounding_box_min;
	      float4 bounding_box_max;
	      float4x4 local_matrix;
	      float4 dimensions;
      };

      struct PSInput
      {
        float4 position : SV_POSITION;
      };
      uint instance_data_offset : b0;
      StructuredBuffer&lt;float4&gt; static_gpu_memory : t0; 
      StructuredBuffer&lt;float4&gt; dynamic_gpu_memory : t1;

      PSInput vs_box_main(float4 position : POSITION, uint instance_id : SV_InstanceID)
      {
        PSInput result;

        //Get box instance data using primitiveId and the instance_data_offset
        uint instance_offset_floats = instance_data_offset/4 + instance_id;
        uint instance_data_offset_byte = asuint(dynamic_gpu_memory[instance_offset_floats / 4][instance_offset_floats % 4]);

        //Read Box instance data
        BoxInstance instance_data;
        instance_data.bounding_box_min = static_gpu_memory[instance_data_offset_byte / 16];
        instance_data.bounding_box_max = static_gpu_memory[(instance_data_offset_byte / 16) + 1];
        instance_data.local_matrix[0] = static_gpu_memory[(instance_data_offset_byte / 16) + 2];
        instance_data.local_matrix[1] = static_gpu_memory[(instance_data_offset_byte / 16) + 3];
        instance_data.local_matrix[2] = static_gpu_memory[(instance_data_offset_byte / 16) + 4];
        instance_data.local_matrix[3] = static_gpu_memory[(instance_data_offset_byte / 16) + 5];
        instance_data.dimensions = static_gpu_memory[(instance_data_offset_byte / 16) + 6];

        //Each position needs to be multiply by the local matrix
        float3 world_position = mul(float4(position.xyz, 1.f), instance_data.local_matrix);

        result.position = mul(view_projection_matrix, float4(world_position, 1.f));

        return result;
      }

      float4 ps_box_main(PSInput input) : SV_TARGET
      {
        return float4(1.f, 1.f, 1.f, 1.f);
      }
    </Shader>
    <Rasterization cull_mode="None"/>
    <RenderTargets>
      <RenderTarget format="R8G8B8A8_UNORM"/>
    </RenderTargets>
  </Resource>
</Global>
<Passes>
  <Pass name="SyncStaticGPUMemory">
    <Dependencies>
      <Resource name="StaticGPUMemoryBuffer" pre_condition_state="Init" post_update_state="Ready" access="UnorderedAccess"/>
    </Dependencies>
    <Commands>
      <SyncStaticGPUMemoryPass/>
    </Commands>
  </Pass>
  <Pass name="Main">
    <Dependencies>
      <Resource name="StaticGPUMemoryBuffer" pre_condition_state="Ready" access="AllShaderResource"/>
      <DepthBuffer name="SceneDepth" pre_condition_state="Alloc" post_update_state="Free" access="Depth" format="D32_FLOAT"/>
      <Resource name="BackBuffer" access="RenderTarget"/>
    </Dependencies>
    <Commands>
      <SetRenderTarget>
		    <RenderTarget>BackBuffer</RenderTarget>
        <DepthBuffer>SceneDepth</DepthBuffer>
	    </SetRenderTarget>
      <SetRootSignature>BoxRootSignature</SetRootSignature>
      <SetDescriptorTable pipe="Graphics" root_param="1">
        <Descriptor>ViewConstantBuffer</Descriptor>
        <Descriptor as="ShaderResource">StaticGPUMemoryBuffer</Descriptor>
        <Descriptor>DynamicGPUMemoryBuffer</Descriptor>
      </SetDescriptorTable>
	    <ClearRenderTarget colour="0,0,0,0">BackBuffer</ClearRenderTarget>
      <DrawCityBoxItems priority="Box"/>
    </Commands>
  </Pass>
</Passes>
</Root>
