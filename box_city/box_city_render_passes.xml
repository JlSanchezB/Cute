<Root>
<Global>
  <Resource type="RootSignature" name="BoxRootSignature">
    <RootParam index="0" type="Constants" num_constants="1" shader_register="1" visibility="Vertex"/>
    <RootParam index="1" type="DescriptorTable" visibility="All">
      <Range base_shader_register="0" size="1" type="ConstantBuffer"/>
      <Range base_shader_register="0" size="1" type="ShaderResource"/>
      <Range base_shader_register="1" size="1" type="ShaderResource"/>
    </RootParam>
    <StaticSample shader_register="0" visibility="Pixel"/>
    <StaticSample shader_register="1" visibility="Pixel" filter="Linear"/>
  </Resource>
  <Resource type="GraphicsPipelineState" name="BoxPipelineState" depth_enable="true" depth_write="true" depth_stencil_format="D32_FLOAT">
    <RootSignature>BoxRootSignature</RootSignature>
    <InputLayouts>
      <Input semantic_name="POSITION" semantic_index="0" format="R32G32B32_FLOAT" input_slot="0"/>
      <Input semantic_name="NORMAL" semantic_index="0" format="R32G32B32_FLOAT" input_slot="1"/>
    </InputLayouts>
    <Shader pixelshader_entry="ps_box_main" vertexshader_entry="vs_box_main" target="5_0">

      struct PSInput
      {
      float4 position : SV_POSITION;
      float3 normal : TEXCOORD0;
      float4 colour : TEXCOORD1;
      };
      
      cbuffer ViewData : b0
      {
      float4x4 view_projection_matrix;
      float4 time;
      float4 sun_direction;
      };

      cbuffer Root : b1
      {
      uint instance_data_offset;
      }

      StructuredBuffer&lt;float4&gt; static_gpu_memory : t0; 
      StructuredBuffer&lt;float4&gt; dynamic_gpu_memory : t1;

      PSInput vs_box_main(float3 position : POSITION, float3 normal : NORMAL, uint instance_id : SV_InstanceID)
      {
      PSInput result;

      //Get box instance data using primitiveId and the instance_data_offset
      uint instance_offset_floats = instance_data_offset/4 + instance_id;
      uint instance_data_offset_byte = asuint(dynamic_gpu_memory[instance_offset_floats / 4][instance_offset_floats % 4]);

      //Read Box instance data
      float4 instance_data[4];

      instance_data[0] = static_gpu_memory[(instance_data_offset_byte / 16) + 0];
      instance_data[1] = static_gpu_memory[(instance_data_offset_byte / 16) + 1];
      instance_data[2] = static_gpu_memory[(instance_data_offset_byte / 16) + 2];
      instance_data[3] = static_gpu_memory[(instance_data_offset_byte / 16) + 3];

      float3x3 scale_rotate_matrix = float3x3(instance_data[0].xyz, instance_data[1].xyz, instance_data[2].xyz);
      float3x3 rotate_matrix = float3x3(normalize(instance_data[0].xyz), normalize(instance_data[1].xyz), normalize(instance_data[2].xyz));
      float3 translation = float3(instance_data[0].w, instance_data[1].w, instance_data[2].w);

      //Each position needs to be multiply by the local matrix
      float3 world_position = mul(scale_rotate_matrix, position) + translation;
      result.position = mul(view_projection_matrix, float4(world_position, 1.f));

      result.normal = mul(rotate_matrix, normal);
      result.colour = instance_data[3];
      
      return result;
      }

      float4 ps_box_main(PSInput input) : SV_TARGET
      {
      return float4(input.colour.xyz, 1.f) * (0.2f + 0.8f * saturate(dot(normalize(input.normal), sun_direction.xyz)));
      }
    </Shader>
    <Rasterization cull_mode="Front"/>
    <RenderTargets>
      <RenderTarget format="R8G8B8A8_UNORM"/>
    </RenderTargets>
  </Resource>
</Global>
<Passes>
  <Pass name="SyncStaticGPUMemory">
    <Dependencies>
      <Resource name="StaticGPUMemoryBuffer" pre_condition_state="Init" post_update_state="Ready" access="UnorderedAccess"/>
    </Dependencies>
    <Commands>
      <SyncStaticGPUMemoryPass/>
    </Commands>
  </Pass>
  <Pass name="Main">
    <Dependencies>
      <Resource name="StaticGPUMemoryBuffer" pre_condition_state="Ready" access="AllShaderResource"/>
      <DepthBuffer name="SceneDepth" pre_condition_state="Alloc" post_update_state="Free" access="Depth" format="D32_FLOAT"/>
      <Resource name="BackBuffer" access="RenderTarget"/>
    </Dependencies>
    <Commands>
      <SetRenderTarget>
		    <RenderTarget>BackBuffer</RenderTarget>
        <DepthBuffer>SceneDepth</DepthBuffer>
	    </SetRenderTarget>
      <SetRootSignature>BoxRootSignature</SetRootSignature>
      <SetDescriptorTable pipe="Graphics" root_param="1">
        <Descriptor>ViewConstantBuffer</Descriptor>
        <Descriptor as="ShaderResource">StaticGPUMemoryBuffer</Descriptor>
        <Descriptor>DynamicGPUMemoryBuffer</Descriptor>
      </SetDescriptorTable>
	    <ClearRenderTarget colour="0,0,0,0">BackBuffer</ClearRenderTarget>
      <ClearDepthStencil depth="1.f">SceneDepth</ClearDepthStencil>
      <DrawCityBoxItems priority="Box"/>
    </Commands>
  </Pass>
</Passes>
</Root>
