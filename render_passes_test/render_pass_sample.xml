<Root>
<Global>
  <Resource type="Bool" name="PostProcessActivated">True</Resource>
  <Resource type="Texture" name="SampleTexture">texture.dds</Resource>
  <Resource type="RootSignature" name="GraphicsRootSignature">
	  <RootParam index="0" type="DescriptorTable">
		  <Range base_shader_register="0" size="1" type="ShaderResource" visibility="Pixel"/>
      <Range base_shader_register="0" size="1" type="ConstantBuffer" visibility="All"/>
	  </RootParam>
	  <StaticSample shader_register="0" visibility="Pixel"/> 
	  <StaticSample shader_register="1" visibility="Pixel" filter="Linear"/> 
  </Resource>
  <Resource type="RenderTarget" name="RenderTarget" format="R8G8B8A8_UNORM" width="512" height="512"/>
</Global>
<Passes>
  <Pass name="RenderToRenderTarget">
    <Dependencies>
      <Resource name="RenderTarget" pre_condition_state="Init" post_update_state ="Ready" access="RenderTarget"/>
    </Dependencies>
    <Commands>
      <SetRenderTarget>
        <RenderTarget>RenderTarget</RenderTarget>
      </SetRenderTarget>
      <ClearRenderTarget colour="0,0,0,0">RenderTarget</ClearRenderTarget>
      <SetRootSignature>GraphicsRootSignature</SetRootSignature>
      <SetPipelineState>
        <Resource type="GraphicsPipelineState" name="pipeline test 1">
          <RootSignature>GraphicsRootSignature</RootSignature>
          <InputLayouts>
            <Input semantic_name="POSITION" semantic_index="0" format="R32G32B32A32_FLOAT" input_slot="0"/>
            <Input semantic_name="TEXCOORD" semantic_index="0" format="R32G32_FLOAT" input_slot="0" aligned_offset="16"/>
          </InputLayouts>
          <Shader pixelshader_entry="ps_main" vertexshader_entry="vs_main" target="5_0">
            struct GameConstant
            {
            float4 time;
            };

            Texture2D texture_test : t0;
            SamplerState static_sampler : s1;
            GameConstant game_constant : c0;

            struct PSInput
            {
            float4 position : SV_POSITION;
            float2 tex : TEXCOORD0;
            };

            PSInput vs_main(float4 position : POSITION, float2 tex : TEXCOORD0)
            {
            PSInput result;

            result.position = position;
            result.tex = tex;

            return result;
            }

            float4 ps_main(PSInput input) : SV_TARGET
            {
            float2 wave_tex = input.tex + 0.01f * float2(cos(10.f * (game_constant.time.x + input.tex.x)), sin(10.f * (game_constant.time.x + input.tex.y)));
            return texture_test.Sample(static_sampler, wave_tex);
            }
          </Shader>
          <Rasterization/>
          <RenderTargets>
            <RenderTarget format="R8G8B8A8_UNORM"/>
          </RenderTargets>
        </Resource>
      </SetPipelineState>
      <SetDescriptorTable pipe="Graphics" root_param="0">
        <Descriptor>SampleTexture</Descriptor>
        <Descriptor>GameGlobal</Descriptor>
      </SetDescriptorTable>
      <DrawFullScreenQuad/>
    </Commands>
  </Pass>
  <Pass name="Main">
    <Dependencies>
      <Resource name="RenderTarget" pre_condition_state="Ready" access="AllShaderResource"/>
    </Dependencies>
    <Commands>
	    <SetRenderTarget>
		    <RenderTarget>BackBuffer</RenderTarget>
	    </SetRenderTarget>
	    <ClearRenderTarget colour="0,0,0,0">BackBuffer</ClearRenderTarget>
      <SetRootSignature>GraphicsRootSignature</SetRootSignature>
      <SetPipelineState>
        <Resource type="GraphicsPipelineState" name="pipeline test 2">
          <RootSignature>GraphicsRootSignature</RootSignature>
          <InputLayouts>
            <Input semantic_name="POSITION" semantic_index="0" format="R32G32B32A32_FLOAT" input_slot="0"/>
            <Input semantic_name="TEXCOORD" semantic_index="0" format="R32G32_FLOAT" input_slot="0" aligned_offset="16"/>
          </InputLayouts>
          <Shader pixelshader_entry="ps_main" vertexshader_entry="vs_main" target="5_0">
            struct GameConstant
            {
              float4 time;
            };
          
            Texture2D texture_test : t0;
            SamplerState static_sampler : s1;
            GameConstant game_constant : c0;

            struct PSInput
            {
              float4 position : SV_POSITION;
              float2 tex : TEXCOORD0;
            };

            PSInput vs_main(float4 position : POSITION, float2 tex : TEXCOORD0)
            {
              PSInput result;

              result.position = position;
              result.tex = tex;

              return result;
            }

            float4 ps_main(PSInput input) : SV_TARGET
            {
              float2 wave_tex = input.tex + 0.01f * float2(cos(10.f * (game_constant.time.x + input.tex.x)), sin(10.f * (game_constant.time.x + input.tex.y)));
              return texture_test.Sample(static_sampler, wave_tex);
            }
          </Shader>
          <Rasterization/>
          <RenderTargets>
            <RenderTarget format="R8G8B8A8_UNORM"/>
          </RenderTargets>
        </Resource>
      </SetPipelineState>
      <SetDescriptorTable pipe="Graphics" root_param="0">
        <Descriptor>RenderTarget</Descriptor>
        <Descriptor>GameGlobal</Descriptor>
      </SetDescriptorTable>
      <DrawFullScreenQuad/>
    </Commands>
  
</Pass>
</Passes>
</Root>
